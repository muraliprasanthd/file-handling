package com.example.servlet;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;

public class MalwareScanner {

    private static final Logger logger = Logger.getLogger(MalwareScanner.class.getName());
    private static final List<String> SUSPICIOUS_SIGNATURES = List.of("suspicious_code_signature");

    public boolean performMalwareScan(Path filePath) {
        String command = "clamscan";

        try {
            ProcessBuilder processBuilder = new ProcessBuilder(command, filePath.toString());
            Process process = processBuilder.start();

            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    logger.info(line); // Log output
                }
            }

            int exitCode = process.waitFor();
            if (exitCode == 0) {
                logger.info("No malware detected in file: " + filePath);
                return false;
            } else {
                logger.warning("Malware detected in file: " + filePath);
                return true;
            }

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error during malware scan for file: " + filePath, e);
            return false;
        }
    }

    public boolean performStaticAnalysis(Path filePath) {
        try (Stream<String> lines = Files.lines(filePath)) {
            return lines.anyMatch(line ->
                    SUSPICIOUS_SIGNATURES.stream().anyMatch(line::contains));
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error during static analysis for file: " + filePath, e);
            return false;
        }
    }

    public boolean analyzeFile(Path filePath) {
        boolean isMalware = performMalwareScan(filePath);
        boolean isSuspicious = performStaticAnalysis(filePath);
        return isMalware || isSuspicious;
    }
}

